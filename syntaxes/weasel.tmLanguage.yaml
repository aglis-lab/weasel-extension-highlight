comment: "Weasel allows any Unicode character to be used in identifiers, so our identifier regex is: \\b([[:alpha:]_]+\\w*)\\b\n\tcf. The Weasel Programming Language Specification <https://github.com/aglis-lab/weasel>"
fileTypes:
  - we
firstLineMatch: '(?i)-[*]-\s*(mode:)?\s*we\s*-[*]-'
keyEquivalent: ^~G
name: Weasel
patterns:
  - include: '#receiver_function_declaration'
  - include: '#plain_function_declaration'
  - include: '#type_declaration'
  - include: '#basic_things'
  - include: '#exported_variables'
  - begin: ^\s*(import)\b\s+
    beginCaptures:
      '1':
        name: keyword.control.import.we
    end: '(?=(?://|/\*))|$'
    name: meta.preprocessor.we.import
    patterns:
      - begin: '"'
        beginCaptures:
          - name: punctuation.definition.string.begin.we
        end: '"'
        endCaptures:
          - name: punctuation.definition.string.end.we
        name: string.quoted.double.import.we
  - include: '#block'
  - include: '#root_parens'
  - include: '#function_calls'
repository:
  access:
    match: '(?<=\.)[[:alpha:]_]\w*\b(?!\s*\()'
    name: variable.other.dot-access.we
  basic_things:
    patterns:
      - include: '#comments'
      - include: '#initializers'
      - include: '#access'
      - include: '#strings'
      - include: '#keywords'
  block:
    begin: '\{'
    beginCaptures:
      - name: punctuation.section.block.begin.we
    end: '\}'
    endCaptures:
      - name: punctuation.section.block.end.we
    name: meta.block.we
    patterns:
      - include: '#block_innards'
  block_innards:
    patterns:
      - include: '#function_block_innards'
      - include: '#exported_variables'
  comments:
    patterns:
      - captures:
          '1':
            name: meta.toc-list.banner.block.we
        match: ^/\* =(\s*.*?)\s*= \*/$\n?
        name: comment.block.we
      - begin: /\*
        captures:
          - name: punctuation.definition.comment.we
        end: \*/
        name: comment.block.we
      - match: \*/.*\n
        name: invalid.illegal.stray-comment-end.we
      - captures:
          '1':
            name: punctuation.definition.comment.we
          '2':
            name: meta.toc-list.banner.line.we
        match: ^(//) =(\s*.*?)\s*=\s*$\n?
        name: comment.line.double-slash.banner.we
      - begin: '(^[ \t]+)?(?=//)'
        beginCaptures:
          '1':
            name: punctuation.whitespace.comment.leading.we
        end: (?!\G)
        patterns:
          - begin: //
            beginCaptures:
              - name: punctuation.definition.comment.we
            end: \n
            name: comment.line.double-slash.we
            patterns:
              - match: (?>\\\s*\n)
                name: punctuation.separator.continuation.we
  exported_variables:
    comment: 'This is kinda hacky, in order to get the ''var'' scoped the right way again.'
    match: '(?<=\s|\[\])([[:upper:]]\w*)(?=\W+)'
    name: variable.other.exported.we
  fn_parens:
    begin: \(
    beginCaptures:
      - name: punctuation.section.parens.begin.we
    end: \)
    endCaptures:
      - name: punctuation.section.parens.end.we
    name: meta.parens.we
    patterns:
      - include: '#basic_things'
      - include: '#function_calls'
  function_block:
    begin: '\{'
    beginCaptures:
      - name: punctuation.section.function-block.begin.we
    end: '\}'
    endCaptures:
      - name: punctuation.section.function-block.end.we
    name: meta.block.we
    patterns:
      - include: '#function_block_innards'
  function_block_innards:
    patterns:
      - include: '#basic_things'
      - captures:
          '1':
            name: punctuation.whitespace.support.function.leading.we
          '2':
            name: support.function.builtin.we
        match: '(\s*)\b(new|c(lose|ap)|p(anic|rint(ln)?)|len|make|append)(?:\b|\()'
      - include: '#function_block'
      - include: '#function_calls'
      - include: '#fn_parens'
  function_calls:
    captures:
      '1':
        name: punctuation.whitespace.function-call.leading.we
      '2':
        name: support.function.any-method.we
      '3':
        name: punctuation.definition.parameters.we
    match: "(?x)\n\t\t\t    (?: (?= \\s ) (?:(?<=else|new|return) | (?<!\\w)) (\\s+) )?\n\t\t\t    (\\b\n\t\t\t        (?!(for|if|else|switch|return)\\s*\\()\n\t\t\t        (?:[[:alpha:]_]\\w*+\\b)            # method name\n\t\t\t    )\n\t\t\t    \\s*(\\()\n\t\t\t"
    name: meta.function-call.we
  initializers:
    patterns:
      - captures:
          '1':
            name: keyword.control.we
          '2':
            patterns:
              - match: '[[:alpha:]_]\w*'
                name: variable.other.we
          '3':
            patterns:
              - include: '#keywords'
              - match: '[[:alpha:]_]\w*\b(?!\.)'
                name: support.type.we
        comment: This matches the 'let x' style of variable declaration.
        match: >-
          ^\s*(let)\s+((?:[[:alpha:]_]\w*)(?:,\s+[[:alpha:]_]\w*)*)\s*(.*?)\s*(?:=|$)
        name: meta.initialization.explicit.we
      - captures:
          '1':
            patterns:
              - match: '[[:alpha:]_]\w*'
                name: variable.other.we
          '2':
            name: keyword.operator.we
          '3':
            patterns:
              - include: '#keywords'
              - match: '[[:alpha:]_]\w*\b(?!\.)'
                name: support.type.we
        comment: 'This matches the ''x :='' style of variable declaration.'
        match: >-
          ((?:[[:alpha:]_]\w*)(?:\s*,\s+[[:alpha:]_]\w*)*)\s*(:=)(?:\s*([[:alpha:]_]\w*)\s*\{)?
        name: meta.initialization.short.we
  keywords:
    patterns:
      - match: >-
          \b(s(elect|witch)|c(ontinue|ase)|type|i(nterface|f|mport)|def(er|ault)|package|else|var|let|f(or|unc|allthrough)|r(eturn|ange)|break|extern)\b
        name: keyword.control.we
      - match: >-
          (\b|(?<=\]))(int(16|8|32|64)?|uint(16|8|32|64|ptr)?|rune|float(32|64)|complex(64|128)|b(yte|ool)|string|error|struct)\b
        name: storage.type.we
      - match: \b(c(onst|han)|map)\b
        name: storage.modifier.we
      - match: \b(nil|true|false|iota)\b
        name: constant.language.we
      - match: '\b((0(x|X)[0-9a-fA-F]*)|((\d+\.?\d*)|(\.\d+))((e|E)(\+|-)?\d+)?)\b'
        name: constant.numeric.we
      - match: \<\-
        name: keyword.operator.channel.we
  plain_function_declaration:
    begin: "(?x)\n\t\t\t        (^\\s*(fun)\\s*\n\t\t\t         ([[:alpha:]_]\\w*)?                                            # name of function is optional\n\t\t\t         \\( ((?:[\\[\\]\\w\\d\\s\\/,._*&<>-]|(?:interface\\{\\}))*)? \\)        # required braces for parameters (even if empty)\n\t\t\t         \\s*\n\t\t\t         (?:                                                           # optional return types\n\t\t\t          (?: \\( ((?:[\\[\\]\\w\\d\\s,._*&<>-]|(?:interface\\{\\}))*) \\) ) |  # within braces\n\t\t\t          (?: ((?:[\\[\\]\\w\\d\\s,._*&<>-]|(?:interface\\{\\}))*) )          # without braces (just type)\n\t\t\t         )?\n\t\t\t        )\n\t\t\t"
    beginCaptures:
      '1':
        name: meta.function.declaration.we
      '2':
        name: keyword.control.we
      '3':
        name: entity.name.function.we
      '4':
        patterns:
          - captures:
              '1':
                name: variable.parameter.we
            match: '(?<=[\(,])\s*([[:alpha:]_]\w*)'
          - include: '#keywords'
          - match: '[[:alpha:]_]\w*\b(?!\.)'
            name: support.type.parameter.we
      '5':
        patterns:
          - captures:
              '1':
                name: variable.parameter.return.we
            match: '(?<=[\(,])\s*([[:alpha:]_]\w*)'
          - include: '#keywords'
          - match: '[[:alpha:]_]\w*\b(?!\.)'
            name: support.type.return.we
      '6':
        patterns:
          - include: '#keywords'
          - match: '[[:alpha:]_]\w*\b(?!\.)'
            name: support.type.return.we
    comment: >-
      We scope all parenthesized alpha-numeric text as variable.parameter.we and
      storage.type.return.we, which is a bit lazy, as some of it is
      storage.type.
    end: '(?<=\})'
    name: meta.function.plain.we
    patterns:
      - include: '#comments'
      - include: '#keywords'
      - include: '#function_block'
  receiver_function_declaration:
    begin: "(?x)\n\t\t\t        (\n\t\t\t         (fun)\\s*\n\t\t\t         (\n\t\t\t         \\( ((?:[\\[\\]\\w\\d\\s,._*&<>-]|(?:interface\\{\\}))*) \\)\\s+        # receiver variable declarations, in brackets\n\t\t\t         ([[:alpha:]_]\\w*)?                                            # name of function is optional\n\t\t\t         )\n\t\t\t         \\( ((?:[\\[\\]\\w\\d\\s,._*&<>-]|(?:interface\\{\\}))*)? \\)          # required braces for parameters (even if empty)\n\t\t\t         \\s*\n\t\t\t         (?:                                                           # optional return types\n\t\t\t          (?: \\( ((?:[\\[\\]\\w\\d\\s,._*&<>-]|(?:interface\\{\\}))*) \\) ) |  # within braces\n\t\t\t          (?: ((?:[\\[\\]\\w\\d\\s,._*&<>-]|(?:interface\\{\\}))*) )          # without braces (just type)\n\t\t\t         )?\n\t\t\t        )\n\t\t\t"
    beginCaptures:
      '1':
        name: meta.function.receiver.declaration.we
      '2':
        name: keyword.control.we
      '3':
        name: entity.name.function.full-name.we
      '4':
        patterns:
          - captures:
              '1':
                name: variable.other.receiver.we
            match: '(?<=[\(,])\s*([[:alpha:]_]\w*)'
          - include: '#keywords'
          - match: '[[:alpha:]_]\w*'
            name: support.type.receiver.we
      '5':
        name: entity.name.function.we
      '6':
        patterns:
          - captures:
              '1':
                name: variable.parameter.we
            match: '(?<=[\(,])\s*([[:alpha:]_]\w*)'
          - include: '#keywords'
          - match: '[[:alpha:]_]\w*\b(?!\.)'
            name: support.type.parameter.we
      '7':
        patterns:
          - captures:
              '1':
                name: variable.parameter.return.we
            match: '(?<=[\(,])\s*([[:alpha:]_]\w*)'
          - include: '#keywords'
          - match: '[[:alpha:]_]\w*\b(?!\.)'
            name: support.type.return.we
      '8':
        patterns:
          - include: '#keywords'
          - match: '[[:alpha:]_]\w*\b(?!\.)'
            name: support.type.return.we
    comment: Version of above with support for declaring a receiver variable.
    end: '(?<=\})'
    name: meta.function.receiver.we
    patterns:
      - include: '#comments'
      - include: '#keywords'
      - include: '#function_block'
  root_parens:
    begin: \(
    end: '(?<=\()(\))?|(?:\))'
    endCaptures:
      '1':
        name: meta.parens.empty.we
    name: meta.parens.we
    patterns:
      - include: '#basic_things'
      - include: '#exported_variables'
      - include: '#function_calls'
  string_escaped_char:
    patterns:
      - match: >-
          \\(\\|[abfnrutv'"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|[0-7]{3})
        name: constant.character.escape.we
      - match: \\.
        name: invalid.illegal.unknown-escape.we
  string_placeholder:
    patterns:
      - match: "(?x)%\n\t\t\t\t\t    (\\d+\\$)?                                 # field (argument #)\n\t\t\t\t\t    [#0\\- +']*                              # flags\n\t\t\t\t\t    [,;:_]?                                  # separator character (AltiVec)\n\t\t\t\t\t    ((-?\\d+)|\\*(-?\\d+\\$)?)?                  # minimum field width\n\t\t\t\t\t    (\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?             # precision\n\t\t\t\t\t    (\\[\\d+\\])?                               # argument index\n\t\t\t\t\t    [diouxXDOUeEfFgGaAcCsSpnvtTbyYhHmMzZq%]  # conversion type\n\t\t\t\t\t"
        name: constant.other.placeholder.we
      - match: '%'
        name: invalid.illegal.placeholder.we
  strings:
    patterns:
      - begin: '"'
        beginCaptures:
          - name: punctuation.definition.string.begin.we
        end: '"'
        endCaptures:
          - name: punctuation.definition.string.end.we
        name: string.quoted.double.we
        patterns:
          - include: '#string_placeholder'
          - include: '#string_escaped_char'
      - begin: ''''
        beginCaptures:
          - name: punctuation.definition.string.begin.we
        end: ''''
        endCaptures:
          - name: punctuation.definition.string.end.we
        name: string.quoted.single.we
        patterns:
          - include: '#string_escaped_char'
      - begin: '`'
        beginCaptures:
          - name: punctuation.definition.string.begin.we
        end: '`'
        endCaptures:
          - name: punctuation.definition.string.end.we
        name: string.other.raw.we
  type_declaration:
    captures:
      '1':
        name: keyword.control.we
      '2':
        name: entity.name.type.exported.we
      '3':
        name: entity.name.type.private.we
      '4':
        patterns:
          - include: '#keywords'
          - match: '[[:alpha:]_]\w*\b(?!\.)'
            name: support.type.we
    match: "(?x)\n\t\t\t         ^\\s*(type)\\s*\n\t\t\t          (?:([[:upper:]]\\w*)|([[:alpha:]_]\\w*))           # name of type\n\t\t\t          ((?:[\\[\\]\\w\\d\\s\\/,._*&<>-]|(?:interface\\{\\}))*)? # other type\n\t\t\t"
    name: meta.type.we
scopeName: source.we
uuid: 33100200-8916-4F78-8522-4362628C6889
